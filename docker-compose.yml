services:
  # Django Web Application
  web:
    build: .
    container_name: orderflow_web
    command: python manage.py runserver 0.0.0.0:8000
    environment:
      - DJANGO_SETTINGS_MODULE=orderflow.settings
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
    ports:
      - "8002:8000"
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - orderflow_network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: orderflow_postgres
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5434:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - orderflow_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Celery result backend
  redis:
    image: redis:7-alpine
    container_name: orderflow_redis
    ports:
      - "6381:6379"
    volumes:
      - redis_data:/data
    networks:
      - orderflow_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # RabbitMQ for Celery broker
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: orderflow_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_VHOST}
    ports:
      - "5674:5672"   # AMQP port
      - "15674:15672" # Management UI port
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - orderflow_network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker for SMS notifications
  celery_sms_worker:
    build: .
    container_name: orderflow_celery_sms
    command: celery -A orderflow worker -Q sms -l info --concurrency=2
    environment:
      - DJANGO_SETTINGS_MODULE=orderflow.settings
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
    volumes:
      - .:/app
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - orderflow_network
    restart: unless-stopped

  # Celery Worker for Email notifications
  celery_email_worker:
    build: .
    container_name: orderflow_celery_email
    command: celery -A orderflow worker -Q email -l info --concurrency=3
    environment:
      - DJANGO_SETTINGS_MODULE=orderflow.settings
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
    volumes:
      - .:/app
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - orderflow_network
    restart: unless-stopped

  # Celery Worker for general notifications
  celery_notifications_worker:
    build: .
    container_name: orderflow_celery_notifications
    command: celery -A orderflow worker -Q notifications -l info --concurrency=2
    environment:
      - DJANGO_SETTINGS_MODULE=orderflow.settings
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
    volumes:
      - .:/app
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - orderflow_network
    restart: unless-stopped

  # Celery Beat for scheduled tasks
  celery_beat:
    build: .
    container_name: orderflow_celery_beat
    command: celery -A orderflow beat -l info
    environment:
      - DJANGO_SETTINGS_MODULE=orderflow.settings
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
    volumes:
      - .:/app
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - orderflow_network
    restart: unless-stopped

  # Flower for Celery monitoring
  flower:
    build: .
    container_name: orderflow_flower
    command: celery -A orderflow flower --config=flower_config --port=5555
    environment:
      - DJANGO_SETTINGS_MODULE=orderflow.settings
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - FLOWER_BASIC_AUTH=${FLOWER_USER}:${FLOWER_PASSWORD}
    ports:
      - "5557:5555"
    volumes:
      - .:/app
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - orderflow_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  static_volume:
  media_volume:

networks:
  orderflow_network:
    driver: bridge
